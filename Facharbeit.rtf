{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;\red192\green192\blue192;\red255\green0\blue0;\red0\green255\blue0;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\ul\b\f0\fs48\lang7 Der Tagesschau Tatort\par
\ulnone\b0\fs20 Von Simon A. Kob\par
\fs24\par
Prolog:\par
Nachdem ich beim CCC einen Vortrag von David Kriesel \'fcber Spiegel Mining gesehen hatte war ich fest davon entschlossen selber ein solches Data Science project zu starten. Da ich selber gerne Tagesschau artikel lese habe ich mich dann f\'fcr diese entschieden und siehe da eine open Api mit CCL (Creativ Commons Lizenz):\par
{{\field{\*\fldinst{HYPERLINK https://tagesschau.api.bund.dev/index.html }}{\fldrslt{https://tagesschau.api.bund.dev/index.html\ul0\cf0}}}}\f0\fs24\par
\par
\ul\b Akt 1. Eine Geschichte von eigenen Fehlern\par
\ulnone\b0 Na super wir haben eine Api die uns die news in einem ordentlichen format in einer json datei returnen kann:\par

\pard\sl240\slmult1\highlight2\fs16 NewsResponse\{\par
  news[\par
    \{\par
      sophoraIdstringexternalIdstringtitlestringteaserImage\{\par
        \par
      \}datestringtracking[\par
        \{\par
          \par
        \}\par
      ]tags[\par
        \{\par
          \par
        \}\par
      ]updateCheckUrlstringregionIdintegerdetailsstringdetailswebstringshareURLstringtoplinestringfirstSentencestringgeotags[\par
        \{\par
          \par
        \}\par
      ]\par
    \}\par
  ]regional[\par
    \{\par
      sophoraIdstringexternalIdstringtitlestringteaserImage\{\par
        \par
      \}tracking[\par
        \{\par
          \par
        \}\par
      ]tags[\par
        \{\par
          \par
        \}\par
      ]updateCheckUrlstringregionIdstringimages[\par
        \{\par
          \par
        \}\par
      ]detailsstringdetailswebstringshareURLstringtoplinestringfirstSentencestringgeotagsstringbrandingImage\{\par
        \par
      \}typestringexample: storybreakingNewsboolean\par
    \}\par
  ]newStoriesCountLink[\par
    \{\par
      \par
    \}\par
  ]typestringexample: newspagenextPagestringexample: https: //www.tagesschau.de/api2/newsfeed-101~_date-220227.json\par
\}\par
\highlight0\fs24\par

\pard\sa200\sl276\slmult1 Soweit so gut ich schrieb also ein Python script das eine Anfrage an die Api sendet und das zur\'fcckgegebene news.json als auch ein parameter.txt das die anfrage parameter beinhaltet ordentlich auf meinem System speichert. Das soll es sp\'e4ter einfacher machen die Daten zu sortieren und strukturieren.\par

\pard\sl240\slmult1\highlight2\fs16 import os\par
import requests\par
import datetime\par
\par
current_datetime = datetime.datetime.now()\par
folder_name = current_datetime.strftime("%Y-%m-%d_%H-%M-%S")\par
os.makedirs(folder_name)\par
\par
api_url = "{{\field{\*\fldinst{HYPERLINK https://tagesschau.de/api2/news/ }}{\fldrslt{https://tagesschau.de/api2/news/\ul0\cf0}}}}\f0\fs16 "\par
response = requests.get(api_url)\par
\par
if response.status_code == 200:\par
    news_data = response.json()\par
    with open(os.path.join(folder_name, "news.json"), "w") as news_file:\par
        news_file.write(str(news_data))\par
\par
    with open(os.path.join(folder_name, "parameters.txt"), "w") as param_file:\par
        param_file.write(f"Status Code: \{response.status_code\}\\n")\par
        param_file.write(f"URL Requested: \{api_url\}\\n")\par
        param_file.write(f"Response Headers: \{response.headers\}\\n")\par
else:\par
    print(f"Failed to fetch data from \{api_url\}. Status Code: \{response.status_code\}")\par
\par
print(f"Data saved in folder: \{folder_name\}")\par
\highlight0\ul\b\fs48\par

\pard\sa200\sl276\slmult1\ulnone\b0\fs24 Die erste anfrage get\'e4tigt wollte ich nun die daten im zur\'fcckgegebenden news.json auslesen und automatisch sortieren. Dabei wollte ich meine Arbeitsweise folgenerweise strukturieren:\line >Schritt 1: Einlesen der Json file in Python \par
Das versuchte ich hiermit:\par

\pard\sl240\slmult1\highlight2\fs16 with open('news.json', 'r') as json_file:\par
    data = json.load(json_file)\par

\pard\sa200\sl276\slmult1\highlight0\fs24 Oh Error: \par

\pard\sl240\slmult1\highlight3\fs16 Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\par

\pard\sa200\sl276\slmult1\highlight0\fs24 Also ihrgendwas ist falsch in der Json file und siehe da in Zeile eins \{'news': [ m\'fcsste eigentlich \{"news": [ sein. Hmm\par
Dabei sehe ich das auch andere variabeln die eigentlich mit "" angegeben werden m\'fcssten mit '' angegeben werden also ersetze ich alle 'durch " gut jetzt sollte ja alles funtionieren: NEIN\par
Ein fehler in Zeile 68\par
Beim Boolean "breakingNews" ist der angegebene wert false Gro\'dfgeschrieben (also False) das akzeptiert Json nicht als valide.\par
Zu diesem Zeitpunk hatte ich das Json nicht formartiert ich hatte also eine lange Schlange an buchstaben und Zeichen. Deswegen benutzte ich ersteinmal \par
{{\field{\*\fldinst{HYPERLINK https://jsonviewer.stack.hu/ }}{\fldrslt{https://jsonviewer.stack.hu/\ul0\cf0}}}}\f0\fs24  um mein Json zu strukturieren. Formartiert in VScode werden mir 88 Fehler angezeigt. Also mache ich mich auf die suche:\par
Artikel Titel werden als String returned also In "" Das bedeutet wenn in einem Artikel ein Zitat enthalten ist Wird der die String nicht richtig angegeben.\par
Manchmal beinhalten Artikel Titel Unicode Characktere wie zum Beispiel \\xa0 diese m\'fcssen entfernt werden.\par
Gut also bevor wir das Json einlesen und sortieren k\'f6nnen m\'fcssen wir \par
1. Alle False und True zu false und true \'e4ndern\par
2. Alle " entfernen oder durch \'bb ersetzen\par
3. Alle ' mit " ersetzen \par
4. Alle \\xa0 durch space ersetzen (\\xa0 ist der No break Space charackter)\par
(Keine weiteren Unicode characktere haben Probleme gemacht/ waren vorhanden)\par
Wie k\'f6nnen wir das in unserem Python Code umsetzen?:\par

\pard\sl240\slmult1\highlight2\fs16 import json\par
\par
with open('news.json', 'r') as json_file:\par
    raw_data = json_file.read()\par
\par
transformed_data = (\par
    raw_data\par
    .replace('False', 'false')\par
    .replace('True', 'true')\par
    .replace('"', '!')\par
    .replace("'", '"')\par
    .replace('{{\field{\*\fldinst{HYPERLINK "\\\\\\\\xa0'"}}{\fldrslt{\\\\xa0'\ul0\cf0}}}}\f0\fs16 , ' ') \par
)\par
\par
data = json.loads(transformed_data)\par
\par
for item in data["news"]:\par
     title = item.get("title")  \par
    date = item.get("date")  \par
    tags = item.get("tags")  \par
    regionId = item.get("regionId")  \par
    geotags = item.get("geotags")  \par
    \par
    print(title , date , tags ,regionId , geotags)\par

\pard\sa200\sl276\slmult1\highlight0\fs24\par
Ich habe den Code an drei Verschiedenen Json requests getestet das d\'fcrften f\'fcrs erste alle fehler sein und so kriegen wir unsre daten (f\'fcrs erste).s\par
\b OK HIER KOMMT MEHR ODER WENIGER EIN RESTART ICH HAB WAS FALSCH GEMACHT UND \'c4NDERE EIN PAAR ORDNERSTRUKTUREN!!\par

\pard\sl240\slmult1\b0 Man kann das von der Api angefragte Json anders abspeichern und dadurch das ganze .replace drama vermeiden.\line\line\highlight2\fs16 import os\par
import requests\par
import datetime\par
import json\par
\par
folder_name = "News"\par
current_datetime = datetime.datetime.now()\par
\par
\par
# Api Request\par
api_url = "{{\field{\*\fldinst{HYPERLINK https://tagesschau.de/api2/news/ }}{\fldrslt{https://tagesschau.de/api2/news/\ul0\cf0}}}}\f0\fs16 "\par
response = requests.get(api_url)\par
\par
#Save \par
if response.status_code == 200:\par
    news_data = response.json()\par
    json_name = f"News_\{current_datetime.strftime('%Y-%m-%d_%H-%M-%S')\}.json"\par
    with open(os.path.join(folder_name, json_name), "w") as news_file:\par
        news_file.write(json.dumps(news_data))\par
\par
else:\par
    print(f"Something went wrong")\fs24\line\highlight0 Rot ist die alte Version und gr\'fcn ist die neue und richtige Version.\par

\pard\sa200\sl276\slmult1 Die Ordenerstruktur soll von nunan auserdem die folgende sein:\par
F:/Tagesschau\line\tab /News\par
\tab\tab >News_YYYY-MM-DD_HH-MM-SS.json\par
\tab >Start.py\par
\tab >Sort.py\line\par
Diese \'e4nderungen f\'fchren dazu das ich jetzt >2.SeperateArticles\par
ein bischen anpasse und die m\'f6glichkeit hinzuf\'fcge mehrere jsons nacheinander zu analysieren das ist ein kleines bischen schade da ich das weiterentwickelt hatte um automatisch graphen zu erzeugen:\par

\pard\sl240\slmult1\highlight2\fs16 import json\par
import matplotlib.pyplot as plt\par
\par
# Read the JSON file\par
with open('news.json', 'r') as json_file:\par
    raw_data = json_file.read()\par
\par
# Fix !hopefully! all errors \par
transformed_data = (\par
    raw_data\par
    .replace('False', 'false')\par
    .replace('True', 'true')\par
    .replace('"', '!')\par
    .replace("'", '"')\par
    .replace('\\\\xa0', ' ') \par
)\par
\par
# Load a valid Json\par
data = json.loads(transformed_data)\par
\par
#Regioncount\par
counts = [0] * 16\par
\par
for item in data["news"]:\par
    regionId = item.get("regionId")\par
    \par
    if regionId is not None and 1 <= regionId <= 16:\par
        counts[regionId - 1] += 1\par
\par
sorted_counts = sorted(enumerate(counts, start=1), key=lambda x: x[1])\par
\par
for num, count in sorted_counts:\par
    if count > 0:\par
        print(f"RegionId \{num\} occurs \{count\} times.")\par
\par
\par
\highlight4 # Matplotlib visualisation as a bar graph   \par
labels = [str(i) for i in range(1, 17)]\par
\par
plt.bar(labels, counts)\par
plt.title('Number Counts')\par
plt.xlabel('Number')\par
plt.ylabel('Count')\par
\par
plt.show()\par
\line\highlight0\ul\b\fs24 Akt 2: Mehrere Jsons automatisch analysieren:\par
\par
\ulnone\b0 Was genau wollen wir denn in diesem schritt erreichen:\par
Das Script was in diesem Schritt gemacht wird soll am ende wenn alle daten gesammelt sind ausgef\'fchrt werden um automatisch schonmal einige daten auszuwerten vorzusortieren und in einer sinnvollen weise dargestellt zur\'fcckzugeben z.B. In diegrammen oder sortiert in Textform.\ul\b\par
\par
}
 